/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef thrift_file_TYPES_H
#define thrift_file_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ZTE {

class MyData;

typedef struct _MyData__isset {
  _MyData__isset() : p1(false), p2(false), p3(false), p4(false), p5(false), p6(false) {}
  bool p1 :1;
  bool p2 :1;
  bool p3 :1;
  bool p4 :1;
  bool p5 :1;
  bool p6 :1;
} _MyData__isset;

class MyData {
 public:

  MyData(const MyData&);
  MyData& operator=(const MyData&);
  MyData() : p1(), p2(0), p3(0) {
  }

  virtual ~MyData() throw();
  std::string p1;
  int32_t p2;
  int64_t p3;
  std::vector<int32_t>  p4;
  std::vector<std::string>  p5;
  std::map<std::string, int32_t>  p6;

  _MyData__isset __isset;

  void __set_p1(const std::string& val);

  void __set_p2(const int32_t val);

  void __set_p3(const int64_t val);

  void __set_p4(const std::vector<int32_t> & val);

  void __set_p5(const std::vector<std::string> & val);

  void __set_p6(const std::map<std::string, int32_t> & val);

  bool operator == (const MyData & rhs) const
  {
    if (!(p1 == rhs.p1))
      return false;
    if (!(p2 == rhs.p2))
      return false;
    if (!(p3 == rhs.p3))
      return false;
    if (!(p4 == rhs.p4))
      return false;
    if (!(p5 == rhs.p5))
      return false;
    if (!(p6 == rhs.p6))
      return false;
    return true;
  }
  bool operator != (const MyData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MyData &a, MyData &b);

inline std::ostream& operator<<(std::ostream& out, const MyData& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
