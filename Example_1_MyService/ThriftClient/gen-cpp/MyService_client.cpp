// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MyService.h"
#include <iostream>
#include <memory>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TSocket.h>
#include <boost/shared_ptr.hpp>
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::ZTE;
using std::cin;
//using std::make_shared;
//using boost::shared_ptr;
using boost::shared_ptr;
int main(int argc, char* argv[])
{
    for (int index{}; index < argc; ++index)
        std::cout << argv[index] << std::endl;
    // A Transport layer that uses a blocking socket, only one connection can be active at a time
    shared_ptr<TSocket> socket(new TSocket("localhost", 9090));
    // Others transports are often wrapped around in this one, it provides buffering of input and output data
    shared_ptr<TTransport> transport(new TBufferedTransport(socket));

    shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));

    MyServiceClient client(protocol);
    transport->open();
    client.getData("GTK");
    cin.get();
    transport->close();
    return 0;
}
